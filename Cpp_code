#include<iostream>
#include<bits/stdc++.h>
using namespace std;

void OptimalParents(int i, int j, int n, int *parens, char &name);

void MatrixChainOrder(int arr[],int n)
{
    int mat[n][n], s[n][n];

    for(int i=0; i<n; i++)
        mat[i][i] = 0;

    for(int l=2; l<n; l++)
    {
        for(int i=1; i<n-l+1; i++)
        {
            int j = i+l-1;
            mat[i][j] = INT_MAX;
			for (int k=i; k<=j-1; k++)
			{
				int q = mat[i][k] + mat[k+1][j] + arr[i-1]*arr[k]*arr[j];
				//cout << "\nCheck\n" << arr[i-1]*arr[k]*arr[j];
				if (q < mat[i][j])
				{
					mat[i][j] = q;
                    s[i][j] = k;

				}
            }
        }
    }
    char MatName = 'A';
    OptimalParents(1, n-1, n, (int *)s, MatName);
    cout << "\nThe optimal Cost is : " << mat[1][n-1]<<endl;

}

void OptimalParents(int i, int j, int n, int *parens, char &matName)
{

	if (i == j)
	{
		cout << matName;
		matName = matName + 1;
		return;
	}

	cout << "(";
	OptimalParents(i, *((parens+i*n)+j), n,parens, matName);
	OptimalParents(*((parens+i*n)+j) + 1, j,n, parens, matName);
	cout << ")";
}

int main()
{
    int MatChain, dmn1, dmn2;
    char MatName = 'A';

    cout << "Number of matrices: ";
    cin >> MatChain;

	int array[MatChain];

    cout << "\nMust be two dimensional matrix: \n" << endl;

    for(int i=0; i<MatChain; i++)
    {
        cout << "The dimension of matrix " << MatName << " : ";
        cin >> dmn1 >> dmn2;
        if(i==0)
        {
            array [i] = dmn1;
            array [i+1] = dmn2;
        }
        else if( i>0 && array[i] != dmn1)
        {
            system("Color 1A");
            cout << "\nDimensional error!!!\n";
            system("PAUSE");
            system("CLS");
            return main();
        }
        else
        {   array[i] == dmn1;
            array[i+1] = dmn2;
        }
        MatName++;
    }

        MatrixChainOrder(array, MatChain+1);
}
